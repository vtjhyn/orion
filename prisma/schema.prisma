generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String    @unique
  hashedPassword   String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  roleId           String @db.ObjectId
  role             Role @relation(fields: [roleId], references: [id])
  order            Order[]
}

model Role {
  id     String    @id @default(auto()) @map("_id") @db.ObjectId
  name   String    @unique
  users  User[]    // Menambahkan relasi ke pengguna dengan peran ini
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Int
  quantity    Int
  unitId      String   @db.ObjectId
  unit        Unit     @relation(fields: [unitId], references: [id]) // Menyimpan satuan item (misalnya, kg, pcs, dll) dengan relasi opsional
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  materials   ProductMaterial[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  products Product[] // Ini mengaitkan kategori dengan produk
}

model Unit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  products    Product[] // Ini mengaitkan unit dengan produk
  materials   Material[]
}

model Material {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  quantity  Int
  unitId    String   @db.ObjectId
  unit      Unit     @relation(fields: [unitId], references: [id]) // Menyimpan satuan item (misalnya, kg, pcs, dll) dengan relasi opsional
  products  ProductMaterial[]
}

model ProductMaterial {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  materialId String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  material   Material @relation(fields: [materialId], references: [id])
}


model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  total     Int
  orderDate DateTime
  status    String   // Status pesanan (misalnya, "Menunggu Pembayaran", "Dikirim", "Selesai", dll)
  items     OrderItem[] // Ini mengaitkan pesanan dengan item pesanan
  paymentId String   @db.ObjectId
  payment   Payment  @relation(fields: [paymentId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model OrderItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  productId  String  @db.ObjectId
  quantity   Int
  price      Int
  product    Product @relation(fields: [productId], references: [id])
  order      Order   @relation(fields: [orderId], references: [id])
  orderId    String  @db.ObjectId
}

model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentDate     DateTime
  amount          Int
  order           Order[]        
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String        @db.ObjectId
}

model PaymentMethod {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  payments    Payment[] 
}